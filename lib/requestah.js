// Generated by CoffeeScript 1.3.3
(function() {
  var Requestah, http, querystring, url;

  http = require("http");

  querystring = require("querystring");

  url = require("url");

  module.exports = function(port) {
    return new Requestah(port);
  };

  Requestah = (function() {

    function Requestah(port) {
      this.port = port || 80;
      this.headers = {};
      this;

    }

    Requestah.prototype.get = function(uri, params, callback) {
      return this.request("GET", uri, params, callback);
    };

    Requestah.prototype.post = function(uri, params, callback) {
      return this.request("POST", uri, params, callback);
    };

    Requestah.prototype.put = function(uri, params, callback) {
      return this.request("PUT", uri, params, callback);
    };

    Requestah.prototype.del = function(uri, params, callback) {
      return this.request("DELETE", uri, params, callback);
    };

    Requestah.prototype.setFixedHeader = function(k, v) {
      this.headers[k] = v;
      return this.headers;
    };

    Requestah.prototype.setDebug = function(v) {
      this.debug = v;
      return this.debug;
    };

    Requestah.prototype.request = function(method, uri, params, callback) {
      var debugData, i, options, parsedParams, req;
      if (typeof callback === "undefined") {
        callback = params;
        params = {};
      }
      uri = url.parse(uri, true);
      options = {
        port: this.port,
        method: method != null ? method : 'GET',
        path: uri.path,
        headers: {}
      };
      if (uri.hostname) {
        options.host = uri.host;
      }
      for (i in this.headers) {
        options.headers[i] = this.headers[i];
      }
      for (i in params.headers) {
        options.headers[i] = params.headers[i];
      }
      delete params.headers;
      if (Object.keys(params).length !== 0 && method === "GET") {
        delete params['Content-Type'];
        parsedParams = querystring.stringify(params);
        options.path += "?" + parsedParams;
      }
      if (Object.keys(params).length !== 0 && method !== "GET") {
        if (!params.type || params.type === "json") {
          delete params['type'];
          parsedParams = JSON.stringify(params);
          options.headers["Content-Type"] = "application/json";
        } else if (params.type === "form") {
          delete params['type'];
          parsedParams = querystring.stringify(params);
          options.headers["Content-Type"] = "application/x-www-form-urlencoded";
        }
      }
      debugData = {
        opts: options,
        params: params,
        parsedParams: parsedParams != null ? parsedParams : {}
      };
      if (this.debug) {
        return callback(debugData);
      }
      req = http.request(options);
      if (Object.keys(params).length !== 0 && method !== "GET") {
        req.write(parsedParams);
      }
      req.on("response", function(res) {
        res.body = "";
        res.setEncoding("utf-8");
        res.on("data", function(chunk) {
          return res.body += chunk;
        });
        return res.on("end", function() {
          return callback(res, debugData);
        });
      });
      return req.end();
    };

    return Requestah;

  })();

}).call(this);
